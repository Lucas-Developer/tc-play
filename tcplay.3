.\"
.\" Copyright (c) 2011 The DragonFly Project.  All rights reserved.
.\" 
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\" 3. Neither the name of The DragonFly Project nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific, prior written permission.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
.\" COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd December 07, 2013
.Dt TCPLAY 3
.Os
.Sh NAME
.Nm tc_api_init ,
.Nm tc_api_uninit ,
.Nm tc_api_info_volume ,
.Nm tc_api_info_mapped_volume ,
.Nm tc_api_create_volume ,
.Nm tc_api_modify_volume ,
.Nm tc_api_map_volume ,
.Nm tc_api_unmap_volume ,
.Nm tc_api_check_cipher ,
.Nm tc_api_check_prf_hash ,
.Nm tc_api_get_error_msg ,
.Nm tc_api_get_summary ,
.Nm tc_api_get_state
.Nd TrueCrypt volume management
.Sh LIBRARY
.Lb libtcplay
.Sh SYNOPSIS
.In tcplay_api.h
.Ft int
.Fn tc_api_init "int verbose"
.Ft int
.Fn tc_api_uninit "void"
.Ft int
.Fn tc_api_info_volume "tc_api_opts *api_opts" "tc_api_volinfo *info"
.Ft int
.Fn tc_api_info_mapped_volume "tc_api_opts *api_opts" "tc_api_volinfo *info"
.Ft int
.Fn tc_api_create_volume "tc_api_opts *api_opts"
.Ft int
.Fn tc_api_modify_volume "tc_api_opts *api_opts"
.Ft int
.Fn tc_api_map_volume "tc_api_opts *api_opts"
.Ft int
.Fn tc_api_unmap_volume "tc_api_opts *api_opts"
.Ft int
.Fn tc_api_check_cipher "tc_api_opts *api_opts"
.Ft int
.Fn tc_api_check_prf_hash "tc_api_opts *api_opts"
.Ft const char *
.Fn tc_api_get_error_msg "void"
.Ft const char *
.Fn tc_api_get_summary "void"
.Ft tc_api_state
.Fn tc_api_get_state "float *progress_pct"
.Sh DESCRIPTION
The
.Nm tcplay
library provides an interface to create, query and map 
TrueCrypt-compatible
volumes.
.Pp
The
.Fn tc_api_create_volume ,
.Fn tc_api_modify_volume ,
.Fn tc_api_map_volume ,
.Fn tc_api_unmap_volume ,
.Fn tc_api_check_cipher
and
.Fn tc_api_check_prf_hash
functions take a
.Vt tc_api_opts
data structure as only argument, which is defined as follows:
.Bd -literal
typedef struct tc_api_opts {
	/* Common fields */
	const char	*tc_device;
	const char	*tc_passphrase;
	const char	**tc_keyfiles;
	const char	**tc_passphrase_hidden;
	const char	**tc_keyfiles_hidden;

	/* Fields for mapping / info */
	const char	*tc_map_name;
	int		tc_protect_hidden;

	/* Fields for mapping / info / modify */
	int		tc_password_retries;
	int		tc_interactive_prompt;
	unsigned long	tc_prompt_timeout;
	int		tc_use_system_encryption;
	const char	*tc_system_device;
	int		tc_use_fde;
	int		tc_use_backup;
	int		tc_allow_trim;

	/* Fields for modify */
	const char	*tc_new_passphrase;
	const char	**tc_new_keyfiles;
	const char	*tc_new_prf_hash;
	int		tc_use_weak_salt;

	/* Fields for creation */
	const char	*tc_cipher;
	const char	*tc_prf_hash;
	const char	*tc_cipher_hidden;
	const char	*tc_prf_hash_hidden;
	size_t		tc_size_hidden_in_bytes;
	int		tc_no_secure_erase;
	int		tc_use_weak_keys;
} tc_api_opts;
.Ed
.Pp
where the keyfile fields,
.Fa tc_keyfiles ,
.Fa tc_keyfiles_hidden
and
.Fa tc_new_keyfiles
are
.Dv NULL
terminated arrays of key file strings.
.Pp
The
.Fn tc_api_info_volume
and
.Fn tc_api_info_mapped_volume
functions take a
.Vt tc_api_volinfo
data structure as second argument, which is defined as follows:
.Bd -literal
typedef struct tc_api_volinfo {
	char		tc_device[1024];
	char		tc_cipher[256];
	char		tc_prf[64];

	int		tc_key_bits;

	size_t		tc_size;		/* in bytes */
	off_t		tc_iv_offset;		/* in bytes */
	off_t		tc_block_offset;	/* in bytes */
} tc_api_volinfo;
.Ed
.Pp
The
.Fn tc_api_init
function initializes the library internals and prepares it for use via
the API.
This function has to be called before using any other API function.
If the
.Fa verbose
argument is non-zero, then the library will output information such as
errors via stdout and stderr.
.Pp
The
.Fn tc_api_uninit
function clears up all internal secure memory, such as memory used for
decrypted headers, passphrases, keyfiles, etc.
.Pp
The
.Fn tc_api_info_volume
function retrieves information about a volume using the parameters
specified in the
.Fa api_opts
argument.
All fields except
.Fa tc_map_name
are used in the same way as for
.Fn tc_api_map_volume .
The retrieved information is placed into the
.Fa info
argument.
The
.Fa tc_cipher
and
.Fa tc_prf
fields will contain a string describing the block cipher (chain)
and PBKDF2 PRF algorithm respectively.
The
.Fa tc_key_bits
field gives the total key size used for the block cipher(s).
The
.Fa tc_size
field gives the size of the volume in bytes.
The
.Fa tc_iv_offset
and
.Fa tc_block_offset
fields give the IV and block offset in bytes of the volume,
respectively.
The
.Fa tc_device
field contains the path to the raw encrypted block device.
.Pp
The
.Fn tc_api_info_mapped_volume
is similar to the
.Fn tc_api_info_volume
function, but is to be used on already mapped volumes and
doesn't require any passphrase or keyfiles.
The
.Fa tc_map_name
field in the
.Fa api_opts
parameter determines which mapped volume is to be queried.
The retrieved information is placed into the
.Fa info
argument.
All fields will be populated as when calling
.Fn tc_api_info_volume
except for the
.Fa tc_prf
field, which will contain the string "(unknown)".
.Pp
The
.Fn tc_api_create_volume
function creates a new volume using the parameters specified in the
.Fa api_opts
argument.
The new volume will be created on the device specified by
.Fa tc_device
using the cipher specified by
.Fa tc_cipher
and the pbkdf2 prf hash algorithm specified by
.Fa tc_prf_hash
and using the passphrase and keyfiles specified by
.Fa tc_passphrase
and
.Fa tc_keyfiles
respectively.
If
.Fa tc_size_hidden_in_bytes
is not zero, a hidden volume of the given size will be created, using
the cipher specified by
.Fa tc_cipher_hidden
and the pbkdf2 prf hash algorithm specified by
.Fa tc_prf_hash_hidden .
If
.Fa tc_cipher_hidden
or
.Fa tc_prf_hash_hidden
are
.Dv NULL ,
the same algorithm as for the outer volume will be used.
The passphrase and keyfiles used are specified by
.Fa tc_passphrase_hidden
and
.Fa tc_keyfiles_hidden
respectively.
If
.Fa tc_no_secure_erase
is specified, no erase will be performed.
If
.Fa tc_use_weak_keys
is specified, the key material for the master key will be taken from
.Pa /dev/urandom
instead of
.Pa /dev/random .
This option should never be used other than for testing.
.Pp
The
.Fn tc_api_modify_volume
function modifies a volume (header) according to the parameters specified
in the
.Fa api_opts
parameter.
The volume is specified in
.Fa tc_device .
The
.Fa tc_interactive_prompt
field determines whether the user will be prompted to enter a passphrase
interactively or whether the passphrase in
.Fa tc_passphrase
will be used.
If an interactive prompt is used, the prompt will time out after
.Fa tc_prompt_timeout
seconds.
A value of 0 indicates that no timeout will occur.
The number of passphrase entry retries is defined by
.Fa tc_password_retries .
Depending on the passphrase/keyfiles used
either the outer or the hidden volume header will be modified.
Any keyfiles that are needed to unlock the volume are specified in
.Fa tc_keyfiles .
If
.Fa tc_use_system_encryption
is specified, a device using system encryption can be accessed.
The
.Fa tc_system_device
should point to the parent device (i.e. underlying physical disk),
while the
.Fa tc_device
argument should point to the actual encrypted partition.
If
.Fa tc_use_fde
is specified, the device pointed to by
.Fa tc_device
should be a whole disk device, not any partition.
If
.Fa tc_use_backup
is specified,
.Nm tcplay
will use the backup headers at the end of a volume
instead of the primary headers as template for the modification.
Both the backup and the main header will always be written as part
of a
.Fn tc_api_modify_volume
call.
The
.Fa tc_new_passphrase
and
.Fa tc_new_keyfiles
arguments specify the new passphrase and keyfile(s) to be used, respectively.
The
.Fa tc_new_passphrase
argument will only be used if
.Fa tc_interactive_prompt
is not set, otherwise the user will be prompted for the new passphrase.
The
.Fa tc_new_prf_hash
specifies the PBKDF2 PRF hash algorithm to be used when reencrypting the header.
If it is
.Dv NULL ,
the same PBKDF2 PRF hash function will be used that the header already uses.
If
.Fa tc_use_weak_salt
is set, a weak source of entropy will be used for the salt of both the
main and backup headers.
This option does not affect the entropy of the master volume keys, as these
are not modified.
.Pp
The
.Fn tc_api_map_volume
function maps a volume using the parameters specified in the
.Fa api_opts
argument.
The volume, which will be mapped as
.Fa tc_map_name ,
is specified in
.Fa tc_device .
The
.Fa tc_interactive_prompt
field determines whether the user will be prompted to enter a passphrase
interactively or whether the passphrase in
.Fa tc_passphrase
will be used.
If an interactive prompt is used, the prompt will time out after
.Fa tc_prompt_timeout
seconds.
A value of 0 indicates that no timeout will occur.
The number of passphrase entry retries is defined by
.Fa tc_password_retries .
Depending on the passphrase/keyfiles used
either the outer or the hidden volume will be mapped.
If
.Fa tc_protect_hidden
is specified, the outer volume will be mapped, but its size will be
adjusted so that it does not map over the hidden volume - the hidden
volume will hence be protected from any accidental overwriting.
If
.Fa tc_protect_hidden
is specified, the passphrase and keyfiles for the hidden volume
must be specified in
.Fa tc_passphrase_hidden
and
.Fa tc_keyfiles_hidden .
If
.Fa tc_use_system_encryption
is specified, a device using system encryption can be accessed.
The
.Fa tc_system_device
should point to the parent device (i.e. underlying physical disk),
while the
.Fa tc_device
argument should point to the actual encrypted partition.
If
.Fa tc_use_fde
is specified, the device pointed to by
.Fa tc_device
should be a whole disk device, not any partition.
The device will be mapped or queried as a whole.
To access individual partitions, a utility such as
.Xr kpartx 8
should be used, which will create additional individual mappings
for each partition in the decrypted mapped volume.
For more details on full disk encryption, see
.Xr tcplay 8 .
If
.Fa tc_use_backup
is specified,
.Nm tcplay
will use the backup headers at the end of a volume
instead of the primary headers to access it.
If
.Fa tc_allow_trim
is specified,
.Nm tcplay
will allow TRIM (discards) on the mapped volume.
.Pp
The
.Fn tc_api_unmap_volume
unmaps / closes the volume specified in
.Fa tc_map_name .
.Pp
The
.Fn tc_api_check_cipher
function checks whether the cipher specified in the
.Fa api_opts
argument field
.Fa tc_cipher
is valid.
.Pp
The
.Fn tc_api_check_prf_hash
function checks whether the prf hash algorithm specified in the
.Fa api_opts
argument field
.Fa tc_prf_hash
is valid.
.Pp
The
.Fn tc_api_get_error_msg
function should be called whenver another API function returns
.Dv TC_ERR .
It returns a string containing a description of the error that
occured.
.Pp
The
.Fn tc_api_get_summary
function returns a string containing a summary of the current
progress of a certain operation.
Currently only the volume erasing
part of creating a new volume can provide a summary.
When no summary is available, an empty string is returned.
The output otherwise is equivalent to that of a
.Dv SIGINFO
signal when using
.Xr tcplay 8 .
.Pp
The
.Fn tc_api_get_state
function returns information on the current state of
.Nm tcplay .
Three states are currently reported:
.Bl -tag -width indent
.It Dv TC_STATE_GET_RANDOM
is reported when
.Nm tcplay
is gathering entropy for key material.
.It Dv TC_STATE_ERASE
is reported when the volume is being erased.
.It Dv TC_STATE_UNKNOWN
is reported in all other cases.
.El
.Pp
The two states
.Dv TC_STATE_GET_RANDOM
and
.Dv TC_STATE_ERASE
are reported separately, as they are the only lengthy steps
during the use of tcplay.
The
.Fa progress_pct
parameter, if not
.Dv NULL ,
will be set to the percentage completed so far of these operations.
.Sh NOTES
TrueCrypt limits passphrases to 64 characters (including the terminating
null character).
To be compatible with it,
.Nm tcplay
does the same.
All passphrases (exlcuding keyfiles) are trimmed to 64 characters.
Similarly, keyfiles are limited to a size of 1 MB, but up to 256
keyfiles can be used.
.Sh RETURN VALUES
All functions except
.Fn tc_api_get_error_msg
and
.Fn tc_api_get_summary
return either
.Dv TC_OK
to signal that the operation completed successfully, or
.Dv TC_ERR
to signal that an error occured.
.Pp
The
.Fn tc_api_get_error_msg
and
.Fn tc_api_get_summary
functions always return a valid, but possibly empty, string.
.Pp
The
.Fn tc_api_get_state
function always returns one of:
.Dv TC_STATE_UNKNOWN ,
.Dv TC_STATE_ERASE
or
.Dv TC_STATE_GET_RANDOM .

.Sh COMPATIBILITY
The
.Nm tcplay
library offers full compatibility with TrueCrypt volumes including 
hidden
volumes, system encryption (map-only), keyfiles and cipher cascading.
.Sh SEE ALSO
.Xr tcplay 8 ,
.Xr kpartx 8
.Sh HISTORY
The
.Nm tcplay
library appeared in
.Dx 2.11 .
.Sh AUTHORS
.An Alex Hornung

